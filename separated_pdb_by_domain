{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPKUUscEwCFJ8mcZ1ZRu7Ok",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Elzara20/BIO/blob/main/separated_pdb_by_domain\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install biopython"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LQqlGX31yFmK",
        "outputId": "d71578d7-3470-4188-a3e8-4cfb6cad31e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting biopython\n",
            "  Downloading biopython-1.79-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.6 MB)\n",
            "\u001b[K     |████████████████████████████████| 2.6 MB 22.0 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from biopython) (1.21.6)\n",
            "Installing collected packages: biopython\n",
            "Successfully installed biopython-1.79\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.extend(['/content/models/research/', '/content/models/research/slim/'])\n",
        "!pip install pymol"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ozetPq_3stZi",
        "outputId": "4d38da01-880b-4c2c-9b56-911d1f0bb7ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "\u001b[31mERROR: Could not find a version that satisfies the requirement pymol (from versions: none)\u001b[0m\n",
            "\u001b[31mERROR: No matching distribution found for pymol\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UV3O8yCpu5jd",
        "outputId": "95f9b5e9-39b5-4dce-887c-f2f1fb555043"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/Bio/PDB/StructureBuilder.py:92: PDBConstructionWarning: WARNING: Chain A is discontinuous at line 2893.\n",
            "  PDBConstructionWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/Bio/PDB/StructureBuilder.py:92: PDBConstructionWarning: WARNING: Chain I is discontinuous at line 3022.\n",
            "  PDBConstructionWarning,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "circle_target_points [[ 0.          1.          0.        ]\n",
            " [ 0.          0.9961947  -0.08715574]\n",
            " [ 0.          0.98480775 -0.17364818]\n",
            " ...\n",
            " [-0.08715574  0.96225019  0.25783416]\n",
            " [-0.08715574  0.98106026  0.17298739]\n",
            " [-0.08715574  0.99240388  0.08682409]]\n",
            "circle_target_points length 5184\n",
            "atoms length 2385\n",
            "rres_ssa_on_protein=\n",
            "[[[ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  ...\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]]\n",
            "\n",
            " [[ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  ...\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]]\n",
            "\n",
            " [[ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  ...\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]]\n",
            "\n",
            " ...\n",
            "\n",
            " [[-6.82499981 -3.71299982  9.2670002 ]\n",
            "  [-6.82499981 -3.71680512  9.17984446]\n",
            "  [-6.82499981 -3.72819207  9.09335202]\n",
            "  ...\n",
            "  [-6.91215555 -3.75074963  9.52483436]\n",
            "  [-6.91215555 -3.73193956  9.43998759]\n",
            "  [-6.91215555 -3.72059594  9.35382429]]\n",
            "\n",
            " [[ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  ...\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]]\n",
            "\n",
            " [[ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  ...\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]\n",
            "  [ 0.          0.          0.        ]]]\n",
            "type of rres_ssa_on_protein=\n",
            "<class 'numpy.ndarray'>\n",
            "len of rres_ssa_on_protein=\n",
            "2385\n",
            "len of rres_ssa_on_protein[0]=\n",
            "5184\n",
            "len of rres_ssa_on_protein[0][0]=\n",
            "3\n",
            "shape of rres_ssa_on_protein=\n",
            "(2385, 5184, 3)\n"
          ]
        }
      ],
      "source": [
        "import os, math\n",
        "from unittest import skip\n",
        "from numba import *\n",
        "import numpy as np\n",
        "from Bio.PDB.PDBParser import PDBParser\n",
        "# from biotite.structure.info import vdw_radius_protor\n",
        "\n",
        "pdbParser = PDBParser()\n",
        "\n",
        "def assign_coords(iterable, size):\n",
        "    res = np.zeros((size, 3))\n",
        "    for i in prange(size):\n",
        "        res[i] = iterable[i]\n",
        "    return res\n",
        "\n",
        "class Chain:\n",
        "    def __init__(self, chain):\n",
        "        self.ress = [res for res in chain.get_residues()]\n",
        "        self.atoms = [atom for atom in chain.get_atoms()]\n",
        "        self.atoms_len = len(self.atoms)\n",
        "        self.atoms_coords = [atom.coord for atom in self.atoms]\n",
        "        self.np_atoms = np.zeros((self.atoms_len, 4))\n",
        "        index = 0\n",
        "        \n",
        "        for res in self.ress:\n",
        "            for atom in res.get_atoms():\n",
        "                cvdw = None\n",
        "                try:\n",
        "                    cvdw = vdw_radius_protor(res.resname, atom.name)\n",
        "                except:\n",
        "                    pass\n",
        "                vdw = 1 if cvdw is None else cvdw\n",
        "                self.np_atoms[index] = [\n",
        "                    *atom.coord,\n",
        "                    vdw\n",
        "                ]\n",
        "                index += 1\n",
        "\n",
        "        \n",
        "\n",
        "class Model:\n",
        "    def __init__(self, model):\n",
        "        self.atoms = model.get_atoms()\n",
        "        self.coords = [atom.coord for atom in self.atoms]\n",
        "        self.atoms_count = sum([1 for a in self.atoms])\n",
        "        self.chains = [Chain(chain) for chain in model]\n",
        "\n",
        "\n",
        "class PDBFile:\n",
        "    def __init__(self, path):\n",
        "        filename = os.path.basename(path).split('.')[0]\n",
        "        self.struct = pdbParser.get_structure(filename, path)\n",
        "        self.models = [Model(model) for model in self.struct]\n",
        "        self.chains = []\n",
        "\n",
        "\n",
        "pdb = PDBFile('/content/1D9I.pdb')\n",
        "\n",
        "test_atoms = pdb.models[0].chains[0].np_atoms\n",
        "\n",
        "def degrees_to_radian(degrees):\n",
        "    return (degrees * math.pi) / 180\n",
        "\n",
        "def rotate_around_z(p, alpha):\n",
        "    rotation_matrix = np.matrix([\n",
        "        [np.cos(degrees_to_radian(alpha)), -np.sin(degrees_to_radian(alpha)), 0],\n",
        "        [np.sin(degrees_to_radian(alpha)), np.cos(degrees_to_radian(alpha)), 0],\n",
        "        [0, 0, 1]\n",
        "    ])\n",
        "    point = np.matrix([p[0], p[1], p[2]])\n",
        "    new_point = point.dot(rotation_matrix)\n",
        "    for i in range(3):\n",
        "        if np.abs(new_point[0, i]) < 1e-15:\n",
        "            new_point[0, i] = 0\n",
        "    return new_point[0, 0], new_point[0, 1], new_point[0, 2]\n",
        "\n",
        "def rotate_around_x(p, alpha):\n",
        "    rotation_matrix = np.matrix([\n",
        "        [1, 0, 0],\n",
        "        [0, np.cos(degrees_to_radian(alpha)), -np.sin(degrees_to_radian(alpha))],\n",
        "        [0, np.sin(degrees_to_radian(alpha)), np.cos(degrees_to_radian(alpha))],\n",
        "    ])\n",
        "    point = np.matrix([p[0], p[1], p[2]])\n",
        "    new_point = point.dot(rotation_matrix)\n",
        "    for i in range(3):\n",
        "        if np.abs(new_point[0, i]) < 1e-10:\n",
        "            new_point[0, i] = 0\n",
        "    return new_point[0, 0], new_point[0, 1], new_point[0, 2]\n",
        "\n",
        "def circumvent_the_sphere(angle_step):\n",
        "    # Вначале смещаемся по одной из осей. Пусть это будет ось оординат. Подойдет любое смещение\n",
        "    target_point = np.array([0, 1, 0])\n",
        "\n",
        "    # Вычисляем все векторы положения пробы\n",
        "    target_points = []\n",
        "    for i in range(0, 360, angle_step):\n",
        "        target_point_i = rotate_around_z(target_point, i)\n",
        "        for j in range(0, 360, angle_step):\n",
        "            target_point_j = rotate_around_x(target_point_i, j)\n",
        "            target_points.append(target_point_j)\n",
        "    return np.array(target_points)\n",
        "\n",
        "angle_step = 5\n",
        "circle_target_points = circumvent_the_sphere(angle_step)\n",
        "print(f\"circle_target_points {circle_target_points}\")\n",
        "print(f\"circle_target_points length {circle_target_points.shape[0]}\")\n",
        "print(f\"atoms length {test_atoms.shape[0]}\")\n",
        "\n",
        "@njit(parallel=True)\n",
        "def calculate_vdw_solid(atoms):\n",
        "    res = np.zeros((atoms.shape[0], circle_target_points.shape[0], 3))\n",
        "    distance = lambda a, b: np.sqrt(np.power(a[0] - b[0], 2) + np.power(a[1] - b[1], 2) + np.power(a[2] - b[2], 2)) \n",
        "    for atom_index in prange(atoms.shape[0]):\n",
        "        for ctp_index in prange(circle_target_points.shape[0]):\n",
        "            shift_vector = circle_target_points[ctp_index] * atoms[atom_index, 3]\n",
        "            skip_factor = False\n",
        "            target_res_value = atoms[atom_index][:3] + shift_vector\n",
        "            res[atom_index, ctp_index] = atoms[atom_index][:3] + shift_vector\n",
        "            for check_atom_index in prange(atoms.shape[0]):\n",
        "                if atom_index == check_atom_index:\n",
        "                    continue\n",
        "                if distance(target_res_value, atoms[check_atom_index]) <= (atoms[check_atom_index, 3]):\n",
        "                    skip_factor = True\n",
        "            if not skip_factor:\n",
        "                res[atom_index, ctp_index] = target_res_value\n",
        "    return res\n",
        "\n",
        "\n",
        "@njit(parallel=True)\n",
        "def calculate_solvent_accessible_points(atoms):\n",
        "    probe_radius = 1.4\n",
        "    distance = lambda a, b: np.sqrt(np.power(a[0] - b[0], 2) + np.power(a[1] - b[1], 2) + np.power(a[2] - b[2], 2)) \n",
        "    res = np.zeros((atoms.shape[0], circle_target_points.shape[0], 3))\n",
        "    for atom_index in prange(atoms.shape[0]):\n",
        "        for ctp_index in prange(circle_target_points.shape[0]):\n",
        "            shift_vector = circle_target_points[ctp_index] * (atoms[atom_index, 3] + probe_radius)\n",
        "            skip_factor = False\n",
        "            target_res_value = atoms[atom_index][:3] + shift_vector\n",
        "            for check_atom_index in prange(atoms.shape[0]):\n",
        "                if atom_index == check_atom_index:\n",
        "                    continue\n",
        "                if distance(target_res_value, atoms[check_atom_index]) <= (atoms[check_atom_index, 3] + probe_radius):\n",
        "                    skip_factor = True\n",
        "            if not skip_factor:\n",
        "                res[atom_index, ctp_index] = target_res_value\n",
        "    return res\n",
        "\n",
        "@njit(parallel=True)\n",
        "def calculate_solvent_accessible_points_on_protein_surface(atoms):\n",
        "    probe_radius = 1.4\n",
        "    distance = lambda a, b: np.sqrt(np.power(a[0] - b[0], 2) + np.power(a[1] - b[1], 2) + np.power(a[2] - b[2], 2)) \n",
        "    res = np.zeros((atoms.shape[0], circle_target_points.shape[0], 3)) # !!!!! скорее всего можно circle_target_points.shape[0] заменить на 3 (значение постоянно)\n",
        "    for atom_index in prange(atoms.shape[0]):\n",
        "        for ctp_index in prange(circle_target_points.shape[0]):\n",
        "            shift_vector = circle_target_points[ctp_index] * (atoms[atom_index, 3] + probe_radius)\n",
        "            skip_factor = False\n",
        "            target_res_value = atoms[atom_index][:3] + shift_vector\n",
        "            for check_atom_index in prange(atoms.shape[0]):\n",
        "                if atom_index == check_atom_index:\n",
        "                    continue\n",
        "                if distance(target_res_value, atoms[check_atom_index]) <= (atoms[check_atom_index, 3] + probe_radius):\n",
        "                    skip_factor = True\n",
        "            if not skip_factor:\n",
        "                res[atom_index, ctp_index] = atoms[atom_index][:3] + circle_target_points[ctp_index] * atoms[atom_index, 3]\n",
        "    return res\n",
        "\n",
        "# res = calculate_vdw_solid(test_atoms)\n",
        "# res_ssa = calculate_solvent_accessible_points(test_atoms)\n",
        "rres_ssa_on_protein = calculate_solvent_accessible_points_on_protein_surface(test_atoms)\n",
        "print(f\"rres_ssa_on_protein=\\n{rres_ssa_on_protein}\")\n",
        "print(f\"type of rres_ssa_on_protein=\\n{type(rres_ssa_on_protein)}\")\n",
        "print(f\"len of rres_ssa_on_protein=\\n{len(rres_ssa_on_protein)}\")\n",
        "print(f\"len of rres_ssa_on_protein[0]=\\n{len(rres_ssa_on_protein[0])}\")\n",
        "print(f\"len of rres_ssa_on_protein[0][0]=\\n{len(rres_ssa_on_protein[0][0])}\")\n",
        "print(f\"shape of rres_ssa_on_protein=\\n{rres_ssa_on_protein.shape}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from numba import njit, prange\n",
        "\n",
        "@njit(parallel=True)\n",
        "def prange_test(A):\n",
        "    s = 0\n",
        "    # Without \"parallel=True\" in the jit-decorator\n",
        "    # the prange statement is equivalent to range\n",
        "    for i in prange(A):\n",
        "        s += i\n",
        "        print(f\"s={s}, i={i}\")\n",
        "    print(s)\n",
        "print(prange_test(5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dJFU6ZIhdLt0",
        "outputId": "485d1440-c932-477e-d786-26c7a2dce2d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "s=0, i=0s=3, i=3\n",
            "s=7, i=4\n",
            "\n",
            "s=1, i=1\n",
            "s=3, i=2\n",
            "10\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pymol import cmd,stored\n",
        "def contact_surface(receptor,ligand,states=0):\n",
        "\n",
        "\t\"\"\"\n",
        "\tAUTHOR\n",
        "\tMartin Christen\n",
        "\t\n",
        "\tDESCRIPTION\n",
        "\tThis script calculates individual or global contact surfaces between a\n",
        "\treceptor molecule and a bundle of docked ligand structures (which have\n",
        "\tto be loaded into PyMOL as a multimodel object).\n",
        "\t\n",
        "\tThe exact contact surface area values (in Angstrom^2) are printed to\n",
        "\tthe screen and also appended to a file called contactareas.txt\n",
        "\t\n",
        "\tIf only a single global contact surface is calculated, a selection\n",
        "\tnamed \"contact\" is created that includes all receptor atoms within\n",
        "\t3.9A of any ligand atom.\n",
        "\t\n",
        "\tUSAGE\n",
        "\tcontact_surface receptor, ligand, [states=0]\n",
        "\t\n",
        "\tPARAMETERS\n",
        "\t\n",
        "\treceptor (string)\n",
        "\tThe name of the selection/object representing the receptor protein\n",
        "\t\n",
        "\tligand (string)\n",
        "\tThe name of the selection/object representing the ligand.\n",
        "\tNote that this may be another protein!\n",
        "\t\n",
        "\tstates (integer)\n",
        "\tCalculate contact surface between the receptor and the first n states\n",
        "\tof the ligand. If states = 0 (default), the script calculates a global\n",
        "\tcontact surface which takes  all possible ligand states into account.\n",
        "\t\"\"\"\n",
        "\t# sanity check the number of states\n",
        "\tstates = abs(int(states))\n",
        "\t\n",
        "\t# make sure all atoms within an object occlude one another\n",
        "\tcmd.flag('ignore','none')\n",
        "\t\n",
        "\t# use solvent-accessible surface with high sampling density\n",
        "\tcmd.set('dot_solvent','1')\n",
        "\tcmd.set('dot_density','3')\n",
        "\t\n",
        "\t#if the 'states' parameter = 0 create a superposition of all ligand states\n",
        "\tif states == 0:\n",
        "\t\tcmd.split_states(ligand)\n",
        "\t\tcmd.group('ligandtemp',ligand+\"_*\")\n",
        "\t\tcmd.create(ligand+\"_all\",'ligandtemp')\n",
        "\t\tcmd.delete('ligandtemp')\n",
        "\t\t\n",
        "\t\t#create complex\n",
        "\t\tcmd.create('complextemp',ligand+\"_all \"+receptor)\n",
        "\t\n",
        "\t\t#measure area\n",
        "\t\tligand_area=cmd.get_area(ligand+\"_all\")\n",
        "\t\treceptor_area=cmd.get_area(receptor)\n",
        "\t\tcomplex_area=cmd.get_area('complextemp')\n",
        "\t\t#normalize since the area is counted TWICE (once on receptor and once on ligand)\n",
        "\t\tcontact_area=((ligand_area + receptor_area) - complex_area) / 2\n",
        "\t\t#delete complex\n",
        "\t\tcmd.delete('complextemp')\n",
        "\t\t\n",
        "\t\t#create the contact surface\n",
        "\t\tcmd.select('contact',\"(\"+receptor+\" and (\"+ligand+\"_all around 3.9))\")\n",
        "\t\t\n",
        "\t\t#print contact surface area\n",
        "\t\tf=open('contactareas.txt','a')\n",
        "\t\tprint(\"%s - %s : \" % (receptor,ligand))\n",
        "\t\tprint >>f, \"%-s\\t%-s\\t\" % (receptor,ligand),\n",
        "\t\tprint >>f, \"%-s\" % (contact_area)\n",
        "\t\tprint(contact_area)\n",
        "\t\tf.close()\n",
        "\t\tprint(\"The GLOBAL contact area between \",receptor,\" and \",ligand,\" is (A^2):\")\n",
        "\t\tprint ((ligand_area + receptor_area) - complex_area) / 2\n",
        "\t\n",
        "\t#If 'states' <> 0 calculate the contact areas to the first 'states' ligand states.\n",
        "\t#No individual contact surface objects are created to avoid overloading PyMOL.\n",
        "\telse:\n",
        "\t\t#create an object for each ligand state\n",
        "\t\tcmd.split_states(ligand)\n",
        "\t\t\n",
        "\t\t#sanity check: do not exceed that maximum number of states\n",
        "\t\tif states > cmd.count_states(ligand):\n",
        "\t\t\tstates = cmd.count_states(ligand)\n",
        "\t\t\n",
        "\t\t#calculate contact surface area\n",
        "\t\tprint(\"The contact areas between \",receptor,\" and \",ligand,\" [states 1 - \",str(states),\"] are (A^2):\")\n",
        "\t\t#start looping\n",
        "\t\tfor s in range(1,states+1):\n",
        "\t\t\t#create complex\n",
        "\t\t\tcmd.create(\"tmp\",ligand,s,1)\n",
        "\t\t\tcmd.create('complextemp',\"tmp \"+receptor)\n",
        "\t\t\t#measure areas\n",
        "\t\t\tligand_area=cmd.get_area('tmp')\n",
        "\t\t\treceptor_area=cmd.get_area(receptor)\n",
        "\t\t\tcomplex_area=cmd.get_area('complextemp')\n",
        "\t\t\t#normalize since the area is counted TWICE (once on receptor and once on ligand)\n",
        "\t\t\tcontact_area=((ligand_area + receptor_area) - complex_area)/2\n",
        "\t\t\t#delete temporary files\n",
        "\t\t\tcmd.delete('tmp')\n",
        "\t\t\tcmd.delete(ligand+\"_*\")\n",
        "\t\t\tcmd.delete('complextemp')\n",
        "\t\t\t#print contact surface area\n",
        "\t\t\tf=open('contactareas.txt','a')\n",
        "\t\t\tprint(\"%s - %s_%-5s: \" % (receptor,ligand,s))\n",
        "\t\t\tprint >>f, \"%-s\\t%-s_%-5s\\t\" % (receptor,ligand,s),\n",
        "\t\t\tprint >>f, \"%-s\" % (contact_area)\n",
        "\t\t\tprint(contact_area)\n",
        "\t\t\tf.close()\n",
        "\n",
        "cmd.extend(\"contact_surface\",contact_surface)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "-00EfMCOADAG",
        "outputId": "57d340bb-c1d7-4ed5-f061-38457d175cb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-e96d62d5b292>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpymol\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcmd\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstored\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcontact_surface\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreceptor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mligand\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstates\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \t\"\"\"\n\u001b[1;32m      5\u001b[0m         \u001b[0mAUTHOR\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pymol'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# поиск подсроки с строке => Кнут-Моррис-Пратт\n",
        "import numpy as np\n",
        "def pref(s):\n",
        "  p = np.zeros(len(s), dtype=np.int8)\n",
        "  p[0] = 0\n",
        "  for i in range(1, len(s)):\n",
        "      k = p[i - 1]\n",
        "      while k > 0 and s[i] != s[k]:\n",
        "          k = p[k - 1]\n",
        "      if s[i] == s[k]:\n",
        "          k += 1\n",
        "      p[i] = k\n",
        "  print(p)\n",
        "  return p\n",
        "\n",
        "line1 = 'aaaabddcaa' #input('Введите первую строку ')\n",
        "line2 = 'abbsabsasb' #input('Введите вторую строку ')\n",
        "answer = [] # позиция с которой начинается подстрокф\n",
        "p = pref(line1)\n",
        "print(f'prefix={pref}')\n",
        "for i in range(0, len(line2)):\n",
        "  if p[len(line1) + i + 1] == len(line1):\n",
        "    answer.append(i - len(line1)+1)\n",
        "print(answer)\n",
        "if len(answer) != 0:\n",
        "  print('true')\n",
        "else:\n",
        "  print('false')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "YG4UmyU4_XSx",
        "outputId": "e1f6c38f-31a1-487f-934c-aa01f6217c4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 2 3 0 0 0 0 0 0 1 2]\n",
            "prefix=<function pref at 0x7fb01d826710>\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-4e284cd86c61>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'prefix={pref}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m   \u001b[0;32mif\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m     \u001b[0manswer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: index 13 is out of bounds for axis 0 with size 12"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip3 install biopython"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "byY6-bCdyJQf",
        "outputId": "c0b92412-3a85-44ff-e9ea-8bf536fc44e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: biopython in /usr/local/lib/python3.7/dist-packages (1.79)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from biopython) (1.21.6)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from Bio.PDB import *\n",
        "from Bio.PDB.PDBIO import PDBIO\n",
        "res=0\n",
        "q=0\n",
        "parser = PDBParser()\n",
        "structure = parser.get_structure(\"\",\"/content/1D9I.pdb\")\n",
        "for model in structure:\n",
        "  print(f'model = {model}')\n",
        "  for chain in model:\n",
        "    # print(f'chain = {chain.id}')\n",
        "    for residue in chain:\n",
        "      print(f'residue = {residue.id}')\n",
        "      res+=1\n",
        "      for atom in residue:\n",
        "        # print(atom.id)\n",
        "        q+=1\n",
        "print(res)\n"
      ],
      "metadata": {
        "id": "UE2ZaeGqKpwk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ll='ADCGLRPLFEKKSLEDKTERELLESYIDGRIVEGSDAEIGMSPWQVMLFRKSPQELLCGASLISDRWVLTAAHCLLYPPWDKNFTENDLLVRIGKHSRTRYERNIEKISMLEKIYIHPRYNWRENLDRDIALMKLKKPVAFSDYIHPVCLPDRETAASLLQAGYKGRVTGWGNLKETWTANVGKGQPSVLQVVNLPIVERPVCKDSTRIRITDNMFCAGYKPDEGKRGDACEGDSGGPFVMKSPFNNRWYQMGIVSWGEGCDRDGKYGFYTHVFRLKKWIQKVIDQFGDFEEIPEEYL'\n",
        "print(ll[0:31])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ETmpcty1Sbs",
        "outputId": "400eda2c-c06b-42d3-bb5b-e668f217793f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADCGLRPLFEKKSLEDKTERELLESYIDGRI\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "parser = PDBParser()\n",
        "model_data = parser.get_structure(\"\",\"/content/1D9I.pdb\")\n",
        "domain_file = open('/content/dom_1D9I_new.txt','r').read()\n",
        "# domain_checkpoints\n",
        "\n",
        "print(re.findall(\"START=([0-9]+)\", domain_file))\n",
        "domain_checkpoints = {'start':re.findall(\"START=([0-9]+)\", domain_file), 'end':re.findall(\"END=([0-9]+)\", domain_file)}\n",
        "print(int(domain_checkpoints['start'][0]))\n",
        "print(len(domain_checkpoints['start']))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PYTe0CIIA1Vt",
        "outputId": "94d72a39-5688-4baa-d27a-8a4979df6d43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['31', '1']\n",
            "31\n",
            "2\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/Bio/PDB/StructureBuilder.py:92: PDBConstructionWarning: WARNING: Chain A is discontinuous at line 2893.\n",
            "  PDBConstructionWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/Bio/PDB/StructureBuilder.py:92: PDBConstructionWarning: WARNING: Chain I is discontinuous at line 3022.\n",
            "  PDBConstructionWarning,\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/biopython/biopython.git\n",
        "!cd biopython"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A9z8A_Av0YCl",
        "outputId": "cd671dc0-42c0-45f9-9c01-9bb8a0d78d4c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'biopython'...\n",
            "remote: Enumerating objects: 99100, done.\u001b[K\n",
            "remote: Counting objects: 100% (515/515), done.\u001b[K\n",
            "remote: Compressing objects: 100% (317/317), done.\u001b[K\n",
            "remote: Total 99100 (delta 281), reused 377 (delta 197), pack-reused 98585\u001b[K\n",
            "Receiving objects: 100% (99100/99100), 61.40 MiB | 22.09 MiB/s, done.\n",
            "Resolving deltas: 100% (74547/74547), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from Bio.PDB import *\n",
        "from Bio.PDB.PDBIO import PDBIO\n",
        "\n",
        "parser = PDBParser()\n",
        "structure = parser.get_structure(\"\",\"/content/1D9I.pdb\")\n",
        "print(type(structure))\n",
        "model = structure.get_models() \n",
        "models = list(model)\n",
        "print(models)\n",
        "chains = list(models[0].get_chains())\n",
        "residue = list(chains[0].get_residues())\n",
        "print(len(residue))\n",
        "count=0\n",
        "for i in residue:\n",
        "  if i.is_disordered()==1:\n",
        "    count+=1\n",
        "\n",
        "print(count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "XMrbT4ZQzpW7",
        "outputId": "407ca3b8-8188-4d3a-f251-bbd8ec79ba00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-7bf0ee9e9885>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPDBParser\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mstructure\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"/content/1D9I.pdb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstructure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstructure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_models\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/Bio/PDB/PDBParser.py\u001b[0m in \u001b[0;36mget_structure\u001b[0;34m(self, id, file)\u001b[0m\n\u001b[1;32m     94\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstructure_builder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minit_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m             \u001b[0;32mwith\u001b[0m \u001b[0mas_handle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m                 \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/contextlib.py\u001b[0m in \u001b[0;36m__enter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    110\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 112\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    113\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't yield\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/Bio/File.py\u001b[0m in \u001b[0;36mas_handle\u001b[0;34m(handleish, mode, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m     \"\"\"\n\u001b[1;32m     71\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandleish\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/1D9I.pdb'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def pdb_for_domain(start,end, name_file, pdb_file, number_dom):\n",
        "  count=1\n",
        "  for i in range(len(pdb_file)):\n",
        "    if (pdb_file[i][0:5]==\"ATOM \"):\n",
        "      if pdb_file[i][22:27] != pdb_file[i-1][22:27]:        \n",
        "        if count == start:\n",
        "          i_start = i\n",
        "        count+=1\n",
        "        if count == end:\n",
        "          i_end = i\n",
        "          new_pdb_file = ''.join(map(str,pdb_file[i_start:i_end]))\n",
        "          file = open(f\"{name_file}_{number_dom}.pdb\", \"w\")\n",
        "          file.write(new_pdb_file)\n",
        "          file.close()\n",
        "\n",
        "f = open(\"/content/1D9I.pdb\", \"r\")\n",
        "pdb_file = f.readlines()\n",
        "domain_file = open('/content/dom_1D9I_new.txt','r').read()\n",
        "# domain_checkpoints\n",
        "\n",
        "print(re.findall(\"START=([0-9]+)\", domain_file))\n",
        "domain_checkpoints = {'start':re.findall(\"START=([0-9]+)\", domain_file), 'end':re.findall(\"END=([0-9]+)\", domain_file)}\n",
        "print(domain_checkpoints)\n",
        "name_file = '1D9I'\n",
        "for i in range(len(domain_checkpoints['start'])):\n",
        "  pdb_for_domain(int(domain_checkpoints['start'][i]),\n",
        "                 int(domain_checkpoints['end'][i]), \n",
        "                 name_file, \n",
        "                 pdb_file, i+1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "51h8wZSn4BJZ",
        "outputId": "d0d002dd-9664-465d-91a9-a0a174bb05bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['31', '1']\n",
            "{'start': ['31', '1'], 'end': ['280', '30']}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pwd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "duj4JY97LTD1",
        "outputId": "22820f6f-d758-4328-b63f-3a3ee7bb4016"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/Elzara20/BIO.git"
      ],
      "metadata": {
        "id": "Px_8WEFKnEU6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a8b78b4e-9b04-4b99-c632-8c460f38c2dc"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'BIO'...\n",
            "remote: Enumerating objects: 594, done.\u001b[K\n",
            "remote: Counting objects: 100% (594/594), done.\u001b[K\n",
            "remote: Compressing objects: 100% (166/166), done.\u001b[K\n",
            "remote: Total 594 (delta 309), reused 552 (delta 286), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (594/594), 35.55 MiB | 8.36 MiB/s, done.\n",
            "Resolving deltas: 100% (309/309), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip /content/BIO/forDomain/Globular.zip"
      ],
      "metadata": {
        "id": "mVL01rFcrbKa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6cd37bee-21d3-4449-a0b0-fc498b8455d8"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/BIO/forDomain/Globular.zip\n",
            "   creating: content/Globular/\n",
            "   creating: content/Globular/pdb/\n",
            "  inflating: content/Globular/pdb/4RX2.pdb  \n",
            "  inflating: content/Globular/pdb/6QQL.pdb  \n",
            "  inflating: content/Globular/pdb/3EWQ.pdb  \n",
            "  inflating: content/Globular/pdb/3SEA.pdb  \n",
            "  inflating: content/Globular/pdb/3EWO.pdb  \n",
            "  inflating: content/Globular/pdb/1JC7.pdb  \n",
            "  inflating: content/Globular/pdb/4LLI.pdb  \n",
            "  inflating: content/Globular/pdb/4DOU.pdb  \n",
            "  inflating: content/Globular/pdb/2KB0.pdb  \n",
            "  inflating: content/Globular/pdb/6COC.pdb  \n",
            "  inflating: content/Globular/pdb/4J5L.pdb  \n",
            "  inflating: content/Globular/pdb/4LL6.pdb  \n",
            "  inflating: content/Globular/pdb/6EYW.pdb  \n",
            "  inflating: content/Globular/pdb/3LD1.pdb  \n",
            "  inflating: content/Globular/pdb/5T6T.pdb  \n",
            "  inflating: content/Globular/pdb/4S2M.pdb  \n",
            "  inflating: content/Globular/pdb/6V21.pdb  \n",
            "  inflating: content/Globular/pdb/3EWP.pdb  \n",
            "  inflating: content/Globular/pdb/6COD.pdb  \n",
            "  inflating: content/Globular/pdb/5T6V.pdb  \n",
            "  inflating: content/Globular/pdb/6COH.pdb  \n",
            "  inflating: content/Globular/pdb/1D9I.pdb  \n",
            "  inflating: content/Globular/pdb/4FUM.pdb  \n",
            "  inflating: content/Globular/pdb/3MCH.pdb  \n",
            "  inflating: content/Globular/pdb/3RT5.pdb  \n",
            "  inflating: content/Globular/pdb/4LNZ.pdb  \n",
            "  inflating: content/Globular/pdb/2QHT.pdb  \n",
            "  inflating: content/Globular/pdb/4KXI.pdb  \n",
            "  inflating: content/Globular/pdb/3RA5.pdb  \n",
            "  inflating: content/Globular/pdb/4FUN.pdb  \n",
            "  inflating: content/Globular/pdb/2QHU.pdb  \n",
            "  inflating: content/Globular/pdb/6U66.pdb  \n",
            "  inflating: content/Globular/pdb/4RX3.pdb  \n",
            "  inflating: content/Globular/pdb/4RVA.pdb  \n",
            "  inflating: content/Globular/pdb/4FUP.pdb  \n",
            "  inflating: content/Globular/pdb/1S14.pdb  \n",
            "  inflating: content/Globular/pdb/3TVO.pdb  \n",
            "  inflating: content/Globular/pdb/4QYW.pdb  \n",
            "  inflating: content/Globular/pdb/6COE.pdb  \n",
            "  inflating: content/Globular/pdb/2QHV.pdb  \n",
            "  inflating: content/Globular/pdb/4DZ9.pdb  \n",
            "  inflating: content/Globular/pdb/2IS8.pdb  \n",
            "  inflating: content/Globular/pdb/2HQW.pdb  \n",
            "  inflating: content/Globular/pdb/3S4U.pdb  \n",
            "  inflating: content/Globular/pdb/2I6K.pdb  \n",
            "  inflating: content/Globular/pdb/2QHS.pdb  \n",
            "  inflating: content/Globular/pdb/3RA6.pdb  \n",
            "  inflating: content/Globular/pdb/1JLJ.pdb  \n",
            "  inflating: content/Globular/pdb/5DUT.pdb  \n",
            "  inflating: content/Globular/pdb/4L8T.pdb  \n",
            "  inflating: content/Globular/pdb/6U6N.pdb  \n",
            "  inflating: content/Globular/pdb/3LFO.pdb  \n",
            "  inflating: content/Globular/pdb/3O20.pdb  \n",
            "  inflating: content/Globular/pdb/3MMI.pdb  \n",
            "  inflating: content/Globular/pdb/5JXV.pdb  \n",
            "  inflating: content/Globular/pdb/6COB.pdb  \n",
            "  inflating: content/Globular/pdb/4FUO.pdb  \n",
            "  inflating: content/Globular/pdb/3EWR.pdb  \n",
            "  inflating: content/Globular/pdb/6QRO.pdb  \n",
            "  inflating: content/Globular/pdb/3TVN.pdb  \n",
            "  inflating: content/Globular/pdb/6COG.pdb  \n",
            "  inflating: content/Globular/pdb/3O1Y.pdb  \n",
            "  inflating: content/Globular/pdb/4DZ7.pdb  \n",
            "  inflating: content/Globular/pdb/4S2L.pdb  \n",
            "  inflating: content/Globular/pdb/5WCU.pdb  \n",
            "  inflating: content/Globular/pdb/1JB3.pdb  \n",
            "  inflating: content/Globular/pdb/6COF.pdb  \n",
            "  inflating: content/Globular/pdb/2GV1.pdb  \n",
            "  inflating: content/Globular/pdb/1CQ2.pdb  \n",
            "  inflating: content/Globular/pdb/6COI.pdb  \n",
            "   creating: content/Globular/fasta/\n",
            "  inflating: content/Globular/fasta/3MCH  \n",
            "  inflating: content/Globular/fasta/3LD1  \n",
            "  inflating: content/Globular/fasta/3EWP  \n",
            "  inflating: content/Globular/fasta/4DOU  \n",
            "  inflating: content/Globular/fasta/3EWR  \n",
            "  inflating: content/Globular/fasta/6COG  \n",
            "  inflating: content/Globular/fasta/1JB3  \n",
            "  inflating: content/Globular/fasta/1JLJ  \n",
            "  inflating: content/Globular/fasta/2HQW  \n",
            "  inflating: content/Globular/fasta/3O1Y  \n",
            "  inflating: content/Globular/fasta/4DZ9  \n",
            "  inflating: content/Globular/fasta/3MMI  \n",
            "  inflating: content/Globular/fasta/3LFO  \n",
            "  inflating: content/Globular/fasta/4RX2  \n",
            "  inflating: content/Globular/fasta/6COD  \n",
            "  inflating: content/Globular/fasta/4KXI  \n",
            "  inflating: content/Globular/fasta/4RVA  \n",
            "  inflating: content/Globular/fasta/3RA6  \n",
            "  inflating: content/Globular/fasta/4DZ7  \n",
            "  inflating: content/Globular/fasta/2IS8  \n",
            "  inflating: content/Globular/fasta/5T6T  \n",
            "  inflating: content/Globular/fasta/6QQL  \n",
            "  inflating: content/Globular/fasta/5T6V  \n",
            "  inflating: content/Globular/fasta/3TVN  \n",
            "  inflating: content/Globular/fasta/4S2L  \n",
            "  inflating: content/Globular/fasta/6COB  \n",
            "  inflating: content/Globular/fasta/6COH  \n",
            "  inflating: content/Globular/fasta/4FUM  \n",
            "  inflating: content/Globular/fasta/4L8T  \n",
            "  inflating: content/Globular/fasta/1D9I  \n",
            "  inflating: content/Globular/fasta/6COI  \n",
            "  inflating: content/Globular/fasta/6U6N  \n",
            "  inflating: content/Globular/fasta/6COF  \n",
            "  inflating: content/Globular/fasta/2QHT  \n",
            "  inflating: content/Globular/fasta/4LLI  \n",
            "  inflating: content/Globular/fasta/4QYW  \n",
            "  inflating: content/Globular/fasta/1JC7  \n",
            "  inflating: content/Globular/fasta/2I6K  \n",
            "  inflating: content/Globular/fasta/1CQ2  \n",
            "  inflating: content/Globular/fasta/3RA5  \n",
            "  inflating: content/Globular/fasta/3SEA  \n",
            "  inflating: content/Globular/fasta/6EYW  \n",
            "  inflating: content/Globular/fasta/4FUO  \n",
            "  inflating: content/Globular/fasta/4LL6  \n",
            "  inflating: content/Globular/fasta/4RX3  \n",
            "  inflating: content/Globular/fasta/6QRO  \n",
            "  inflating: content/Globular/fasta/3O20  \n",
            "  inflating: content/Globular/fasta/3EWQ  \n",
            "  inflating: content/Globular/fasta/6V21  \n",
            "  inflating: content/Globular/fasta/4FUP  \n",
            "  inflating: content/Globular/fasta/3RT5  \n",
            "  inflating: content/Globular/fasta/5DUT  \n",
            "  inflating: content/Globular/fasta/4LNZ  \n",
            "  inflating: content/Globular/fasta/6COC  \n",
            "  inflating: content/Globular/fasta/4FUN  \n",
            "  inflating: content/Globular/fasta/3TVO  \n",
            "  inflating: content/Globular/fasta/5JXV  \n",
            "  inflating: content/Globular/fasta/4J5L  \n",
            "  inflating: content/Globular/fasta/1S14  \n",
            "  inflating: content/Globular/fasta/2GV1  \n",
            "  inflating: content/Globular/fasta/5WCU  \n",
            "  inflating: content/Globular/fasta/6U66  \n",
            "  inflating: content/Globular/fasta/3EWO  \n",
            "  inflating: content/Globular/fasta/2KB0  \n",
            "  inflating: content/Globular/fasta/3S4U  \n",
            "  inflating: content/Globular/fasta/2QHU  \n",
            "  inflating: content/Globular/fasta/2QHS  \n",
            "  inflating: content/Globular/fasta/6COE  \n",
            "  inflating: content/Globular/fasta/2QHV  \n",
            "  inflating: content/Globular/fasta/4S2M  \n",
            "   creating: content/Globular/.ipynb_checkpoints/\n",
            "   creating: content/Globular/fasta_one/\n",
            "  inflating: content/Globular/fasta_one/2GV1_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/1JC7_new.fasta  \n",
            " extracting: content/Globular/fasta_one/5T6V_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3EWR_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4FUO_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6EYW_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2QHU_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COI_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COH_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4S2L_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3RT5_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3LD1_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COE_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3MMI_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4DZ9_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4L8T_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/5JXV_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3EWO_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COB_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4S2M_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3TVO_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4DOU_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2QHT_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/5DUT_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2QHV_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2IS8_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4LL6_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3O1Y_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3MCH_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/1CQ2_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4FUM_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COF_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3RA5_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/1JLJ_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2I6K_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4FUP_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4LLI_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6QRO_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4QYW_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2KB0_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COG_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3S4U_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2QHS_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COC_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3TVN_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6U6N_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4LNZ_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/2HQW_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/1S14_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3O20_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6QQL_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3RA6_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/1JB3_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/1D9I_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3SEA_new.fasta  \n",
            " extracting: content/Globular/fasta_one/5T6T_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6COD_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6U66_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/6V21_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4RX3_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4RVA_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3EWQ_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4FUN_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4KXI_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4J5L_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4RX2_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3EWP_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/3LFO_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/4DZ7_new.fasta  \n",
            "  inflating: content/Globular/fasta_one/5WCU_new.fasta  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import defaultdict\n",
        "import glob\n",
        "import os\n",
        "import re"
      ],
      "metadata": {
        "id": "naMkDgP6ELCD"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filenames = os.listdir('/content/BIO/forDomain/domains-interval-Pfam')\n",
        "print(filenames)\n",
        "filenames1 = os.listdir('/content/content/Globular/pdb')\n",
        "print(filenames1)"
      ],
      "metadata": {
        "id": "R2rYljU1120o",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52b95683-3482-497d-c821-41171f27eca0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['dom_1S14_new.txt', 'dom_3EWR_new.txt', 'dom_2QHS_new.txt', 'dom_4DZ7_new.txt', 'dom_4RX3_new.txt', 'dom_4S2L_new.txt', 'dom_1D9I_new.txt', 'dom_1CQ2_new.txt', 'dom_4LNZ_new.txt', 'dom_1JLJ_new.txt', 'dom_3EWO_new.txt', 'dom_4FUO_new.txt', 'dom_5T6V_new.txt', 'dom_5DUT_new.txt', 'dom_1JB3_new.txt', 'dom_2IS8_new.txt', 'dom_3RA6_new.txt', 'dom_2KB0_new.txt', 'dom_4J5L_new.txt', 'dom_4RVA_new.txt', 'dom_2GV1_new.txt', 'dom_4RX2_new.txt', 'dom_6U6N_new.txt', 'dom_4S2M_new.txt', 'dom_5WCU_new.txt', 'dom_6COC_new.txt', 'dom_3SEA_new.txt', 'dom_4DOU_new.txt', 'dom_3MCH_new.txt', 'dom_4L8T_new.txt', 'dom_2HQW_new.txt', 'dom_2QHT_new.txt', 'dom_6V21_new.txt', 'dom_6EYW_new.txt', 'dom_6QRO_new.txt', 'dom_4LL6_new.txt', 'dom_4FUN_new.txt', 'dom_1JC7_new.txt', 'dom_5T6T_new.txt', 'dom_2QHU_new.txt', 'dom_4FUM_new.txt', 'dom_3O1Y_new.txt', 'dom_4KXI_new.txt', 'dom_4LLI_new.txt', 'dom_3TVN_new.txt', 'dom_4DZ9_new.txt', 'dom_6COE_new.txt', 'dom_3S4U_new.txt', 'dom_3EWQ_new.txt', 'dom_3TVO_new.txt', 'dom_3EWP_new.txt', 'dom_6COF_new.txt', 'dom_4FUP_new.txt', 'dom_5JXV_new.txt', 'dom_3LFO_new.txt', 'dom_6QQL_new.txt', 'dom_3RT5_new.txt', 'dom_2QHV_new.txt', 'dom_2I6K_new.txt', 'dom_6COB_new.txt', 'dom_3RA5_new.txt', 'dom_3MMI_new.txt', 'dom_6U66_new.txt', 'dom_6COG_new.txt', 'dom_6COH_new.txt', 'dom_6COD_new.txt', 'dom_4QYW_new.txt', 'dom_6COI_new.txt', 'dom_3O20_new.txt', 'dom_3LD1_new.txt']\n",
            "['2I6K.pdb', '3EWO.pdb', '4RX3.pdb', '2QHT.pdb', '2HQW.pdb', '5T6T.pdb', '1CQ2.pdb', '6COH.pdb', '4KXI.pdb', '4DZ9.pdb', '3TVO.pdb', '3RA5.pdb', '3O1Y.pdb', '2QHS.pdb', '5T6V.pdb', '5DUT.pdb', '4FUP.pdb', '5JXV.pdb', '4FUM.pdb', '4LL6.pdb', '6EYW.pdb', '3LD1.pdb', '2QHV.pdb', '6COD.pdb', '6U66.pdb', '4DOU.pdb', '3S4U.pdb', '3O20.pdb', '6COB.pdb', '3RT5.pdb', '1JC7.pdb', '3SEA.pdb', '4S2M.pdb', '6QQL.pdb', '4RVA.pdb', '4LLI.pdb', '6COI.pdb', '4L8T.pdb', '3MCH.pdb', '3LFO.pdb', '2QHU.pdb', '6V21.pdb', '6COF.pdb', '2GV1.pdb', '4FUO.pdb', '4LNZ.pdb', '2KB0.pdb', '4QYW.pdb', '1JLJ.pdb', '3EWP.pdb', '3EWQ.pdb', '3RA6.pdb', '6COE.pdb', '3MMI.pdb', '1JB3.pdb', '1D9I.pdb', '2IS8.pdb', '5WCU.pdb', '6QRO.pdb', '3EWR.pdb', '4FUN.pdb', '1S14.pdb', '6U6N.pdb', '4S2L.pdb', '4RX2.pdb', '4DZ7.pdb', '6COG.pdb', '6COC.pdb', '4J5L.pdb', '3TVN.pdb']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "path_interval = '/content/BIO/forDomain/domains-interval-Pfam'\n",
        "path_pdb = '/content/content/Globular/pdb'\n",
        "\n",
        "file_interval = [f for f in glob.glob(path_interval + \"/*.txt\")]\n",
        "file_pdb = [f for f in glob.glob(path_pdb + \"/*.pdb\")]\n",
        "\n",
        "\n",
        "for i in range(len(file_interval)):\n",
        "  print(f'{file_interval[i][49:53]} => {file_pdb[i]}')\n",
        "f_txt = []\n",
        "f_pdb = []\n",
        "\n",
        "for r, d, f in os.walk(path_interval):\n",
        "  for file in f:\n",
        "    f_txt.append(os.path.join(path_interval, file))\n",
        "for r, d, f in os.walk(path_pdb):\n",
        "  for file in f:\n",
        "    f_pdb.append(os.path.join(path_pdb, file))\n",
        "print(len(f_txt))\n",
        "for i in range(len(f_txt)):\n",
        "  print(f'{f_txt[i]} => {f_pdb[i]}')\n",
        "# итог: при разных способах при одновременном цикле - разные файлы"
      ],
      "metadata": {
        "id": "JQAo9BySn2EV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ee84681-d9d9-4474-9fef-5041e96a18a5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1S14 => /content/content/Globular/pdb/2I6K.pdb\n",
            "3EWR => /content/content/Globular/pdb/3EWO.pdb\n",
            "2QHS => /content/content/Globular/pdb/4RX3.pdb\n",
            "4DZ7 => /content/content/Globular/pdb/2QHT.pdb\n",
            "4RX3 => /content/content/Globular/pdb/2HQW.pdb\n",
            "4S2L => /content/content/Globular/pdb/5T6T.pdb\n",
            "1D9I => /content/content/Globular/pdb/1CQ2.pdb\n",
            "1CQ2 => /content/content/Globular/pdb/6COH.pdb\n",
            "4LNZ => /content/content/Globular/pdb/4KXI.pdb\n",
            "1JLJ => /content/content/Globular/pdb/4DZ9.pdb\n",
            "3EWO => /content/content/Globular/pdb/3TVO.pdb\n",
            "4FUO => /content/content/Globular/pdb/3RA5.pdb\n",
            "5T6V => /content/content/Globular/pdb/3O1Y.pdb\n",
            "5DUT => /content/content/Globular/pdb/2QHS.pdb\n",
            "1JB3 => /content/content/Globular/pdb/5T6V.pdb\n",
            "2IS8 => /content/content/Globular/pdb/5DUT.pdb\n",
            "3RA6 => /content/content/Globular/pdb/4FUP.pdb\n",
            "2KB0 => /content/content/Globular/pdb/5JXV.pdb\n",
            "4J5L => /content/content/Globular/pdb/4FUM.pdb\n",
            "4RVA => /content/content/Globular/pdb/4LL6.pdb\n",
            "2GV1 => /content/content/Globular/pdb/6EYW.pdb\n",
            "4RX2 => /content/content/Globular/pdb/3LD1.pdb\n",
            "6U6N => /content/content/Globular/pdb/2QHV.pdb\n",
            "4S2M => /content/content/Globular/pdb/6COD.pdb\n",
            "5WCU => /content/content/Globular/pdb/6U66.pdb\n",
            "6COC => /content/content/Globular/pdb/4DOU.pdb\n",
            "3SEA => /content/content/Globular/pdb/3S4U.pdb\n",
            "4DOU => /content/content/Globular/pdb/3O20.pdb\n",
            "3MCH => /content/content/Globular/pdb/6COB.pdb\n",
            "4L8T => /content/content/Globular/pdb/3RT5.pdb\n",
            "2HQW => /content/content/Globular/pdb/1JC7.pdb\n",
            "2QHT => /content/content/Globular/pdb/3SEA.pdb\n",
            "6V21 => /content/content/Globular/pdb/4S2M.pdb\n",
            "6EYW => /content/content/Globular/pdb/6QQL.pdb\n",
            "6QRO => /content/content/Globular/pdb/4RVA.pdb\n",
            "4LL6 => /content/content/Globular/pdb/4LLI.pdb\n",
            "4FUN => /content/content/Globular/pdb/6COI.pdb\n",
            "1JC7 => /content/content/Globular/pdb/4L8T.pdb\n",
            "5T6T => /content/content/Globular/pdb/3MCH.pdb\n",
            "2QHU => /content/content/Globular/pdb/3LFO.pdb\n",
            "4FUM => /content/content/Globular/pdb/2QHU.pdb\n",
            "3O1Y => /content/content/Globular/pdb/6V21.pdb\n",
            "4KXI => /content/content/Globular/pdb/6COF.pdb\n",
            "4LLI => /content/content/Globular/pdb/2GV1.pdb\n",
            "3TVN => /content/content/Globular/pdb/4FUO.pdb\n",
            "4DZ9 => /content/content/Globular/pdb/4LNZ.pdb\n",
            "6COE => /content/content/Globular/pdb/2KB0.pdb\n",
            "3S4U => /content/content/Globular/pdb/4QYW.pdb\n",
            "3EWQ => /content/content/Globular/pdb/1JLJ.pdb\n",
            "3TVO => /content/content/Globular/pdb/3EWP.pdb\n",
            "3EWP => /content/content/Globular/pdb/3EWQ.pdb\n",
            "6COF => /content/content/Globular/pdb/3RA6.pdb\n",
            "4FUP => /content/content/Globular/pdb/6COE.pdb\n",
            "5JXV => /content/content/Globular/pdb/3MMI.pdb\n",
            "3LFO => /content/content/Globular/pdb/1JB3.pdb\n",
            "6QQL => /content/content/Globular/pdb/1D9I.pdb\n",
            "3RT5 => /content/content/Globular/pdb/2IS8.pdb\n",
            "2QHV => /content/content/Globular/pdb/5WCU.pdb\n",
            "2I6K => /content/content/Globular/pdb/6QRO.pdb\n",
            "6COB => /content/content/Globular/pdb/3EWR.pdb\n",
            "3RA5 => /content/content/Globular/pdb/4FUN.pdb\n",
            "3MMI => /content/content/Globular/pdb/1S14.pdb\n",
            "6U66 => /content/content/Globular/pdb/6U6N.pdb\n",
            "6COG => /content/content/Globular/pdb/4S2L.pdb\n",
            "6COH => /content/content/Globular/pdb/4RX2.pdb\n",
            "6COD => /content/content/Globular/pdb/4DZ7.pdb\n",
            "4QYW => /content/content/Globular/pdb/6COG.pdb\n",
            "6COI => /content/content/Globular/pdb/6COC.pdb\n",
            "3O20 => /content/content/Globular/pdb/4J5L.pdb\n",
            "3LD1 => /content/content/Globular/pdb/3TVN.pdb\n",
            "70\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_1S14_new.txt => /content/content/Globular/pdb/2I6K.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3EWR_new.txt => /content/content/Globular/pdb/3EWO.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2QHS_new.txt => /content/content/Globular/pdb/4RX3.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4DZ7_new.txt => /content/content/Globular/pdb/2QHT.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4RX3_new.txt => /content/content/Globular/pdb/2HQW.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4S2L_new.txt => /content/content/Globular/pdb/5T6T.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_1D9I_new.txt => /content/content/Globular/pdb/1CQ2.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_1CQ2_new.txt => /content/content/Globular/pdb/6COH.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4LNZ_new.txt => /content/content/Globular/pdb/4KXI.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_1JLJ_new.txt => /content/content/Globular/pdb/4DZ9.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3EWO_new.txt => /content/content/Globular/pdb/3TVO.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4FUO_new.txt => /content/content/Globular/pdb/3RA5.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_5T6V_new.txt => /content/content/Globular/pdb/3O1Y.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_5DUT_new.txt => /content/content/Globular/pdb/2QHS.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_1JB3_new.txt => /content/content/Globular/pdb/5T6V.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2IS8_new.txt => /content/content/Globular/pdb/5DUT.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3RA6_new.txt => /content/content/Globular/pdb/4FUP.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2KB0_new.txt => /content/content/Globular/pdb/5JXV.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4J5L_new.txt => /content/content/Globular/pdb/4FUM.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4RVA_new.txt => /content/content/Globular/pdb/4LL6.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2GV1_new.txt => /content/content/Globular/pdb/6EYW.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4RX2_new.txt => /content/content/Globular/pdb/3LD1.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6U6N_new.txt => /content/content/Globular/pdb/2QHV.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4S2M_new.txt => /content/content/Globular/pdb/6COD.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_5WCU_new.txt => /content/content/Globular/pdb/6U66.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COC_new.txt => /content/content/Globular/pdb/4DOU.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3SEA_new.txt => /content/content/Globular/pdb/3S4U.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4DOU_new.txt => /content/content/Globular/pdb/3O20.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3MCH_new.txt => /content/content/Globular/pdb/6COB.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4L8T_new.txt => /content/content/Globular/pdb/3RT5.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2HQW_new.txt => /content/content/Globular/pdb/1JC7.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2QHT_new.txt => /content/content/Globular/pdb/3SEA.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6V21_new.txt => /content/content/Globular/pdb/4S2M.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6EYW_new.txt => /content/content/Globular/pdb/6QQL.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6QRO_new.txt => /content/content/Globular/pdb/4RVA.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4LL6_new.txt => /content/content/Globular/pdb/4LLI.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4FUN_new.txt => /content/content/Globular/pdb/6COI.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_1JC7_new.txt => /content/content/Globular/pdb/4L8T.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_5T6T_new.txt => /content/content/Globular/pdb/3MCH.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2QHU_new.txt => /content/content/Globular/pdb/3LFO.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4FUM_new.txt => /content/content/Globular/pdb/2QHU.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3O1Y_new.txt => /content/content/Globular/pdb/6V21.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4KXI_new.txt => /content/content/Globular/pdb/6COF.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4LLI_new.txt => /content/content/Globular/pdb/2GV1.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3TVN_new.txt => /content/content/Globular/pdb/4FUO.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4DZ9_new.txt => /content/content/Globular/pdb/4LNZ.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COE_new.txt => /content/content/Globular/pdb/2KB0.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3S4U_new.txt => /content/content/Globular/pdb/4QYW.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3EWQ_new.txt => /content/content/Globular/pdb/1JLJ.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3TVO_new.txt => /content/content/Globular/pdb/3EWP.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3EWP_new.txt => /content/content/Globular/pdb/3EWQ.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COF_new.txt => /content/content/Globular/pdb/3RA6.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4FUP_new.txt => /content/content/Globular/pdb/6COE.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_5JXV_new.txt => /content/content/Globular/pdb/3MMI.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3LFO_new.txt => /content/content/Globular/pdb/1JB3.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6QQL_new.txt => /content/content/Globular/pdb/1D9I.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3RT5_new.txt => /content/content/Globular/pdb/2IS8.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2QHV_new.txt => /content/content/Globular/pdb/5WCU.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_2I6K_new.txt => /content/content/Globular/pdb/6QRO.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COB_new.txt => /content/content/Globular/pdb/3EWR.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3RA5_new.txt => /content/content/Globular/pdb/4FUN.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3MMI_new.txt => /content/content/Globular/pdb/1S14.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6U66_new.txt => /content/content/Globular/pdb/6U6N.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COG_new.txt => /content/content/Globular/pdb/4S2L.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COH_new.txt => /content/content/Globular/pdb/4RX2.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COD_new.txt => /content/content/Globular/pdb/4DZ7.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_4QYW_new.txt => /content/content/Globular/pdb/6COG.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_6COI_new.txt => /content/content/Globular/pdb/6COC.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3O20_new.txt => /content/content/Globular/pdb/4J5L.pdb\n",
            "/content/BIO/forDomain/domains-interval-Pfam/dom_3LD1_new.txt => /content/content/Globular/pdb/3TVN.pdb\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# создание словаря с {id:{interval:---, pdb:---}} для записи ссылок для одного белка\n",
        "path_interval = '/content/BIO/forDomain/domains-interval-Pfam'\n",
        "path_pdb = '/content/content/Globular/pdb'\n",
        "prot_dom = {}\n",
        "file_interval = [f for f in glob.glob(path_interval + \"/*.txt\", recursive=True)]\n",
        "file_pdb = [f for f in glob.glob(path_pdb + \"/*.pdb\", recursive=True)]\n",
        "for interval in file_interval:\n",
        "  for pdb in file_pdb:\n",
        "    if interval[49:53]==pdb[30:34]:\n",
        "      # case = {'protein': interval[49:53], 'interval': interval, 'pdb':pdb }\n",
        "      case = {'interval': interval, 'pdb':pdb }\n",
        "      prot_dom[interval[49:53]] = case\n",
        "      # prot_dom.append(case)\n",
        "      # prot_dom = {f'{interval[49:53]}':[interval, pdb]}\n",
        "      # prot_dom[f'{interval[49:53]}'].append([interval, pdb])\n",
        "\n",
        "# for key in prot_dom:\n",
        "#   print(f\"protein = {key} => {prot_dom[key]}\")\n",
        "# print(prot_dom['3EWR']['interval'])"
      ],
      "metadata": {
        "id": "HfAzOj9swS09"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pdb_for_domain(start,end, name_file, pdb_file, number_dom):\n",
        "  print(f\"  protein ==> {name_file} number={number_dom}\")\n",
        "  count=1\n",
        "  i_start=-1\n",
        "  i_end=-1\n",
        "  t_pdb_file = pdb_file  \n",
        "  for i in range(len(t_pdb_file)):\n",
        "    if (t_pdb_file[i][0:5]==\"ATOM \"):\n",
        "      i_last_atom = i\n",
        "      last_number_of_residues = t_pdb_file[i][22:27]\n",
        "      if t_pdb_file[i][22:27] != t_pdb_file[i-1][22:27]: \n",
        "              \n",
        "        if count == start:\n",
        "          i_start = i\n",
        "         \n",
        "        if count == end+1:                   \n",
        "          i_end = i\n",
        "          break          \n",
        "        count+=1\n",
        "  if (i_end == -1):\n",
        "    i_end = i_last_atom\n",
        "  print(f\"  last number of residue = {last_number_of_residues}\")\n",
        "  print(f\"  count={count}\")\n",
        "  print(f\"  from {i_start}\")\n",
        "  print(f\"  to {i_end}\")\n",
        "  new_pdb_file = ''.join(map(str,t_pdb_file[i_start:i_end]))\n",
        "  file = open(f\"/content/separated_pdb_by_domain/{name_file}_{number_dom}.pdb\", \"w\")\n",
        "  # file = open(f\"{name_file}_{number_dom}.pdb\", \"w\")\n",
        "  file.write(new_pdb_file)\n",
        "  file.close()"
      ],
      "metadata": {
        "id": "CjSlWqHQF2h3"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for key in prot_dom:\n",
        "  # if key == '4FUO' or key == '4FUN' or key=='4DOU' or key=='4FUM' or key=='6U6N' or key=='5DUT' or key=='4DZ9' or key=='4L8T' or key=='4DZ7':\n",
        "  #   continue\n",
        "  # else:\n",
        "    f = open(prot_dom[key]['pdb'], \"r\")\n",
        "    pdb_file = f.readlines()\n",
        "    domain_file = open(prot_dom[key]['interval'],'r').read()\n",
        "    # domain_checkpoints\n",
        "\n",
        "    # print(re.findall(\"START=([0-9]+)\", domain_file))\n",
        "    domain_checkpoints = {'start':re.findall(\"START=([0-9]+)\", domain_file), 'end':re.findall(\"END=([0-9]+)\", domain_file)}\n",
        "    # print(domain_checkpoints)\n",
        "    name_file = key\n",
        "    print(name_file)\n",
        "    for i in range(len(domain_checkpoints['start'])):\n",
        "      pdb_for_domain(int(domain_checkpoints['start'][i]),\n",
        "                  int(domain_checkpoints['end'][i]), \n",
        "                  name_file, \n",
        "                  pdb_file, i+1)"
      ],
      "metadata": {
        "id": "HI1LFTpaFks6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d2e21f8-da5c-4116-e60f-dffc01ead2d2"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1S14\n",
            "  protein ==> 1S14 number=1\n",
            "  last number of residue = 1199 \n",
            "  count=150\n",
            "  from 749\n",
            "  to 1703\n",
            "3EWR\n",
            "  protein ==> 3EWR number=1\n",
            "  last number of residue =  139 \n",
            "  count=139\n",
            "  from 626\n",
            "  to 1422\n",
            "2QHS\n",
            "4DZ7\n",
            "  protein ==> 4DZ7 number=1\n",
            "  last number of residue =  261 \n",
            "  count=258\n",
            "  from 614\n",
            "  to 6415\n",
            "4RX3\n",
            "  protein ==> 4RX3 number=1\n",
            "  last number of residue =  266 \n",
            "  count=239\n",
            "  from 500\n",
            "  to 2175\n",
            "4S2L\n",
            "  protein ==> 4S2L number=1\n",
            "  last number of residue =  261 \n",
            "  count=232\n",
            "  from 511\n",
            "  to 2333\n",
            "1D9I\n",
            "  protein ==> 1D9I number=1\n",
            "  last number of residue =  356 \n",
            "  count=281\n",
            "  from 795\n",
            "  to 2815\n",
            "  protein ==> 1D9I number=2\n",
            "  last number of residue =   18 \n",
            "  count=31\n",
            "  from 550\n",
            "  to 795\n",
            "1CQ2\n",
            "  protein ==> 1CQ2 number=1\n",
            "  last number of residue =  143 \n",
            "  count=143\n",
            "  from 733\n",
            "  to 2646\n",
            "4LNZ\n",
            "  protein ==> 4LNZ number=1\n",
            "  last number of residue = 1825 \n",
            "  count=330\n",
            "  from 4064\n",
            "  to 5756\n",
            "1JLJ\n",
            "  protein ==> 1JLJ number=1\n",
            "  last number of residue =  177 \n",
            "  count=165\n",
            "  from 728\n",
            "  to 1861\n",
            "3EWO\n",
            "  protein ==> 3EWO number=1\n",
            "  last number of residue =  146 \n",
            "  count=149\n",
            "  from 1019\n",
            "  to 2621\n",
            "4FUO\n",
            "  protein ==> 4FUO number=1\n",
            "  last number of residue =   82 \n",
            "  count=81\n",
            "  from 608\n",
            "  to 1646\n",
            "  protein ==> 4FUO number=2\n",
            "  last number of residue =  207 \n",
            "  count=207\n",
            "  from 2382\n",
            "  to 3442\n",
            "  protein ==> 4FUO number=3\n",
            "  last number of residue =  130 \n",
            "  count=129\n",
            "  from 1646\n",
            "  to 2330\n",
            "5T6V\n",
            "5DUT\n",
            "  protein ==> 5DUT number=1\n",
            "  last number of residue =  264 \n",
            "  count=214\n",
            "  from 421\n",
            "  to 2162\n",
            "1JB3\n",
            "  protein ==> 1JB3 number=1\n",
            "  last number of residue =  122 \n",
            "  count=117\n",
            "  from 320\n",
            "  to 1253\n",
            "2IS8\n",
            "  protein ==> 2IS8 number=1\n",
            "  last number of residue =  149 \n",
            "  count=149\n",
            "  from 561\n",
            "  to 1653\n",
            "3RA6\n",
            "  protein ==> 3RA6 number=1\n",
            "  last number of residue =   96 \n",
            "  count=97\n",
            "  from 309\n",
            "  to 1014\n",
            "2KB0\n",
            "  protein ==> 2KB0 number=1\n",
            "  last number of residue =    1 \n",
            "  count=179\n",
            "  from 277\n",
            "  to 2672\n",
            "4J5L\n",
            "  protein ==> 4J5L number=1\n",
            "  last number of residue = 1831 \n",
            "  count=344\n",
            "  from 5011\n",
            "  to 6681\n",
            "4RVA\n",
            "  protein ==> 4RVA number=1\n",
            "  last number of residue =  266 \n",
            "  count=239\n",
            "  from 503\n",
            "  to 2203\n",
            "2GV1\n",
            "  protein ==> 2GV1 number=1\n",
            "  last number of residue =   92 \n",
            "  count=92\n",
            "  from 351\n",
            "  to 1694\n",
            "4RX2\n",
            "  protein ==> 4RX2 number=1\n",
            "  last number of residue =  274 \n",
            "  count=239\n",
            "  from 1119\n",
            "  to 2792\n",
            "6U6N\n",
            "  protein ==> 6U6N number=1\n",
            "  last number of residue =  244 \n",
            "  count=126\n",
            "  from 609\n",
            "  to 2409\n",
            "4S2M\n",
            "  protein ==> 4S2M number=1\n",
            "  last number of residue =  265 \n",
            "  count=232\n",
            "  from 841\n",
            "  to 4456\n",
            "5WCU\n",
            "  protein ==> 5WCU number=1\n",
            "  last number of residue =  132 \n",
            "  count=95\n",
            "  from 816\n",
            "  to 1583\n",
            "  protein ==> 5WCU number=2\n",
            "  last number of residue =   93 \n",
            "  count=257\n",
            "  from 2253\n",
            "  to 2863\n",
            "  protein ==> 5WCU number=3\n",
            "  last number of residue =  101 \n",
            "  count=356\n",
            "  from 3040\n",
            "  to 3642\n",
            "  protein ==> 5WCU number=4\n",
            "  last number of residue =   36 \n",
            "  count=291\n",
            "  from 2863\n",
            "  to 3122\n",
            "  protein ==> 5WCU number=5\n",
            "  last number of residue =   37 \n",
            "  count=788\n",
            "  from 6495\n",
            "  to 7502\n",
            "6COC\n",
            "  protein ==> 6COC number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 720\n",
            "  to 4668\n",
            "3SEA\n",
            "  protein ==> 3SEA number=1\n",
            "  last number of residue =    3 \n",
            "  count=168\n",
            "  from 511\n",
            "  to 1859\n",
            "4DOU\n",
            "  protein ==> 4DOU number=1\n",
            "  last number of residue =  274 \n",
            "  count=154\n",
            "  from 1130\n",
            "  to 3206\n",
            "  protein ==> 4DOU number=2\n",
            "  last number of residue =  421 \n",
            "  count=295\n",
            "  from 3462\n",
            "  to 5544\n",
            "  protein ==> 4DOU number=3\n",
            "  last number of residue =  525 \n",
            "  count=400\n",
            "  from 5786\n",
            "  to 7268\n",
            "3MCH\n",
            "  protein ==> 3MCH number=1\n",
            "  last number of residue =  149 \n",
            "  count=149\n",
            "  from 419\n",
            "  to 1511\n",
            "4L8T\n",
            "  protein ==> 4L8T number=1\n",
            "  last number of residue = 1742 \n",
            "  count=364\n",
            "  from 5316\n",
            "  to 6684\n",
            "2HQW\n",
            "  protein ==> 2HQW number=1\n",
            "  last number of residue =   82 \n",
            "  count=74\n",
            "  from 576\n",
            "  to 1076\n",
            "  protein ==> 2HQW number=2\n",
            "  last number of residue =  883 \n",
            "  count=147\n",
            "  from 1147\n",
            "  to 1668\n",
            "2QHT\n",
            "6V21\n",
            "  protein ==> 6V21 number=1\n",
            "  last number of residue =  159 \n",
            "  count=156\n",
            "  from 1256\n",
            "  to 2431\n",
            "6EYW\n",
            "  protein ==> 6EYW number=1\n",
            "  last number of residue =  395 \n",
            "  count=336\n",
            "  from 2319\n",
            "  to 3140\n",
            "6QRO\n",
            "  protein ==> 6QRO number=1\n",
            "  last number of residue =   66 \n",
            "  count=314\n",
            "  from 1467\n",
            "  to 3234\n",
            "4LL6\n",
            "  protein ==> 4LL6 number=1\n",
            "  last number of residue = 1411 \n",
            "  count=303\n",
            "  from 2041\n",
            "  to 2880\n",
            "4FUN\n",
            "  protein ==> 4FUN number=1\n",
            "  last number of residue =   81 \n",
            "  count=81\n",
            "  from 516\n",
            "  to 1630\n",
            "  protein ==> 4FUN number=2\n",
            "  last number of residue =  206 \n",
            "  count=207\n",
            "  from 2366\n",
            "  to 3438\n",
            "  protein ==> 4FUN number=3\n",
            "  last number of residue =  129 \n",
            "  count=129\n",
            "  from 1630\n",
            "  to 2312\n",
            "1JC7\n",
            "  protein ==> 1JC7 number=1\n",
            "  last number of residue =  118 \n",
            "  count=117\n",
            "  from 319\n",
            "  to 1251\n",
            "5T6T\n",
            "2QHU\n",
            "4FUM\n",
            "  protein ==> 4FUM number=1\n",
            "  last number of residue =   85 \n",
            "  count=81\n",
            "  from 708\n",
            "  to 1840\n",
            "  protein ==> 4FUM number=2\n",
            "  last number of residue =  207 \n",
            "  count=202\n",
            "  from 2584\n",
            "  to 3624\n",
            "  protein ==> 4FUM number=3\n",
            "  last number of residue =  133 \n",
            "  count=129\n",
            "  from 1840\n",
            "  to 2530\n",
            "3O1Y\n",
            "  protein ==> 3O1Y number=1\n",
            "  last number of residue =  104 \n",
            "  count=104\n",
            "  from 1177\n",
            "  to 1971\n",
            "4KXI\n",
            "  protein ==> 4KXI number=1\n",
            "  last number of residue =  128 \n",
            "  count=128\n",
            "  from 447\n",
            "  to 1428\n",
            "4LLI\n",
            "  protein ==> 4LLI number=1\n",
            "  last number of residue = 1809 \n",
            "  count=331\n",
            "  from 2294\n",
            "  to 3129\n",
            "3TVN\n",
            "  protein ==> 3TVN number=1\n",
            "  last number of residue =  261 \n",
            "  count=258\n",
            "  from 560\n",
            "  to 4754\n",
            "4DZ9\n",
            "  protein ==> 4DZ9 number=1\n",
            "  last number of residue =  261 \n",
            "  count=258\n",
            "  from 605\n",
            "  to 6472\n",
            "6COE\n",
            "  protein ==> 6COE number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 834\n",
            "  to 4740\n",
            "3S4U\n",
            "  protein ==> 3S4U number=1\n",
            "  last number of residue =  268 \n",
            "  count=264\n",
            "  from 781\n",
            "  to 4651\n",
            "3EWQ\n",
            "  protein ==> 3EWQ number=1\n",
            "  last number of residue =  139 \n",
            "  count=139\n",
            "  from 649\n",
            "  to 1445\n",
            "3TVO\n",
            "  protein ==> 3TVO number=1\n",
            "  last number of residue =  261 \n",
            "  count=258\n",
            "  from 579\n",
            "  to 4809\n",
            "3EWP\n",
            "  protein ==> 3EWP number=1\n",
            "  last number of residue =  146 \n",
            "  count=149\n",
            "  from 783\n",
            "  to 1587\n",
            "6COF\n",
            "  protein ==> 6COF number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 719\n",
            "  to 4669\n",
            "4FUP\n",
            "  protein ==> 4FUP number=1\n",
            "  last number of residue =   89 \n",
            "  count=81\n",
            "  from 544\n",
            "  to 1098\n",
            "  protein ==> 4FUP number=2\n",
            "  last number of residue =   13 \n",
            "  count=209\n",
            "  from 1461\n",
            "  to 2018\n",
            "  protein ==> 4FUP number=3\n",
            "  last number of residue =  137 \n",
            "  count=129\n",
            "  from 1098\n",
            "  to 1432\n",
            "5JXV\n",
            "  protein ==> 5JXV number=1\n",
            "  last number of residue =    1 \n",
            "  count=57\n",
            "  from 171\n",
            "  to 1029\n",
            "3LFO\n",
            "  protein ==> 3LFO number=1\n",
            "  last number of residue =   96 \n",
            "  count=97\n",
            "  from 334\n",
            "  to 1031\n",
            "6QQL\n",
            "  protein ==> 6QQL number=1\n",
            "  last number of residue =   60 \n",
            "  count=309\n",
            "  from 2065\n",
            "  to 5474\n",
            "3RT5\n",
            "  protein ==> 3RT5 number=1\n",
            "  last number of residue =  128 \n",
            "  count=128\n",
            "  from 545\n",
            "  to 1526\n",
            "2QHV\n",
            "2I6K\n",
            "  protein ==> 2I6K number=1\n",
            "  last number of residue =  211 \n",
            "  count=206\n",
            "  from 1194\n",
            "  to 2417\n",
            "6COB\n",
            "  protein ==> 6COB number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 705\n",
            "  to 4655\n",
            "3RA5\n",
            "  protein ==> 3RA5 number=1\n",
            "  last number of residue =   96 \n",
            "  count=97\n",
            "  from 419\n",
            "  to 1136\n",
            "3MMI\n",
            "  protein ==> 3MMI number=1\n",
            "  last number of residue = 1433 \n",
            "  count=315\n",
            "  from 2477\n",
            "  to 3316\n",
            "6U66\n",
            "  protein ==> 6U66 number=1\n",
            "  last number of residue =  104 \n",
            "  count=138\n",
            "  from 864\n",
            "  to 4022\n",
            "6COG\n",
            "  protein ==> 6COG number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 704\n",
            "  to 4608\n",
            "6COH\n",
            "  protein ==> 6COH number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 628\n",
            "  to 4518\n",
            "6COD\n",
            "  protein ==> 6COD number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 704\n",
            "  to 4608\n",
            "4QYW\n",
            "  protein ==> 4QYW number=1\n",
            "  last number of residue =  118 \n",
            "  count=116\n",
            "  from 351\n",
            "  to 1221\n",
            "6COI\n",
            "  protein ==> 6COI number=1\n",
            "  last number of residue =  250 \n",
            "  count=250\n",
            "  from 783\n",
            "  to 4707\n",
            "3O20\n",
            "  protein ==> 3O20 number=1\n",
            "  last number of residue =  104 \n",
            "  count=104\n",
            "  from 953\n",
            "  to 1747\n",
            "3LD1\n",
            "  protein ==> 3LD1 number=1\n",
            "  last number of residue =  363 \n",
            "  count=360\n",
            "  from 458\n",
            "  to 3241\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!find /content/separated_pdb_by_domain -type f | wc -l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JhgpDvsWHlL6",
        "outputId": "8bc73086-da91-4f65-f86c-86652f053fb9"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "80\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "key = '4DZ7'\n",
        "f = open(prot_dom[key]['pdb'], \"r\")\n",
        "pdb_file = f.readlines()\n",
        "domain_file = open(prot_dom[key]['interval'],'r').read()\n",
        "print(f\"prot_dom[key]['interval'] = {prot_dom[key]['interval']}\")\n",
        "print(f'domain file ={domain_file}')\n",
        "\n",
        "# print(re.findall(\"START=([0-9]+)\", domain_file))\n",
        "domain_checkpoints = {'start':re.findall(\"START=([0-9]+)\", domain_file), 'end':re.findall(\"END=([0-9]+)\", domain_file)}\n",
        "# domain_checkpoints = {'start':['1', '20'], 'end':['19', '25']}\n",
        "print(domain_checkpoints)\n",
        "name_file = key\n",
        "print(len(domain_checkpoints['start']))\n",
        "\n",
        "for i in range(len(domain_checkpoints['start'])):\n",
        "\n",
        "  print(f\"start= {int(domain_checkpoints['start'][i])}\")\n",
        "  print(f\"end= {int(domain_checkpoints['end'][i])}\")\n",
        "\n",
        "  pdb_for_domain(int(domain_checkpoints['start'][i]),\n",
        "                int(domain_checkpoints['end'][i]), \n",
        "                name_file, \n",
        "                pdb_file, i+1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ttbTHyhkIYms",
        "outputId": "4c934f7e-ab79-466b-c4ae-657bbb451f9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "prot_dom[key]['interval'] = /content/BIO/forDomain/domains-interval-Pfam/dom_4DZ7_new.txt\n",
            "domain file =            START=11 END=259\n",
            "\n",
            "{'start': ['11'], 'end': ['259']}\n",
            "1\n",
            "start= 11\n",
            "end= 259\n",
            "  protein ==> 4DZ7 number=1\n",
            "  last number of residue =  261 \n",
            "  count=258\n",
            "  from 614\n",
            "  to 6415\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seq1='ADPDGVKPLILRDCSVAGWLLGNPMCDEFINVPEWSYIVEKANPANDLCYPGNFNDYEELKHLLSRINHFEKIQIIPKSSWSDHEASSGVSSACPYQGTPSFFRNVVWLIKKNNTYPTIKRSYNNTNQEDLLILWGIHHSNDAAEQTKLYQNPTTYISVGTSTLNQRLVPKIATRSKVNGQSGRMDFFWTILKPNDAINFESNGNFIAPEYAYKIVKKGDSAIVKSEHHHHHH'\n",
        "print(len(seq1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IDREHE74peSm",
        "outputId": "4a3fd265-4963-4e1e-e6a5-2de4305bb493"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "233\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!cd /content/separated_pdb_by_domain\n",
        "!pwd\n",
        "!rm -r *.pdb"
      ],
      "metadata": {
        "id": "2--7EUwbJMyj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b72ef2f6-3456-424f-9e65-6f2d07a91806"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n"
          ]
        }
      ]
    }
  ]
}