# -*- coding: utf-8 -*-
"""Белки(чистовик).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fmzq1r_IAg13TtWYqo5nM0cecRmI_M-s
"""


import sys
import Bio
from Bio import SeqIO
from Bio.Blast import NCBIWWW

import urllib
import os
import re
import glob # для файлов в папке

from tqdm import tqdm
import shutil
from joblib import Parallel, delayed
import numpy as np

import requests
import json

from Bio.PDB import *
from Bio.PDB.PDBIO import PDBIO

import warnings
warnings.filterwarnings('ignore')

"""# 1) Находим белки

"""



print("Текущая директория:", os.getcwd())
os.chdir("/home/elzara/pypdb/pypdb")
print("Текущая директория изменилась:", os.getcwd())
from pypdb.pypdb import *
from pypdb.pypdb.clients.search.search_client import perform_search_with_graph
from pypdb.pypdb.clients.search.search_client import ReturnType
from pypdb.pypdb.clients.search.search_client import QueryGroup, LogicalOperator
from pypdb.pypdb.clients.search.operators import text_operators
from pypdb import *
return_type = ReturnType.ENTRY

v1 = text_operators.ExactMatchOperator(
            value="viria",
            attribute="rcsb_entity_source_organism.taxonomy_lineage.name")
v2 = text_operators.ExactMatchOperator(
            value="viruses",
            attribute="rcsb_entity_source_organism.taxonomy_lineage.name")
v3 = text_operators.ExactMatchOperator(
            value="viridae",
            attribute="rcsb_entity_source_organism.taxonomy_lineage.name")

the1 = text_operators.ExactMatchOperator(
            value="viridae",
            attribute="rcsb_entity_source_organism.source_type")
v_group = QueryGroup(
    queries = [v1,v2,v3],
    logical_operator = LogicalOperator.OR
)
results = perform_search_with_graph(query_object=v_group, return_type=return_type)
print(results[:10])
print(f'Всего = {len(results)}')





"""# 2) Скачиваю fasta и pdb + проверка на невирусные сущности"""

def download_pdb(pdbcode, datadir, downloadurl="https://files.rcsb.org/download/"):

    pdbfn = pdbcode + ".pdb"
    url = downloadurl + pdbfn
    outfnm = os.path.join(datadir, pdbfn)
    try:
        urllib.request.urlretrieve(url, outfnm)
        return outfnm
    except Exception as err:
        print(str(err), file=sys.stderr)
        return str(err) #None

def download_fasta(fastacode, datadir, downloadurl="https://www.rcsb.org/fasta/entry/"):

    url = downloadurl + fastacode
    outfnm = os.path.join(datadir, fastacode)
    try:
        urllib.request.urlretrieve(url, outfnm)
        return outfnm
    except Exception as err:
        print(str(err), file=sys.stderr)
        return str(err) #None

def pdb_and_fasta(i_results):
  if download_pdb(i_results, '/home/elzara/V_PROTEINS/pdb/') == 'HTTP Error 404: Not Found':
    print(f'Нет pdb файла для белка {i_results}')
  elif download_fasta(i_results, '/home/elzara/V_PROTEINS/fasta/') == 'HTTP Error 404: Not Found':
    print(f'Нет fasta файла для белка {i_results}')
  else:
    download_pdb(i_results, '/home/elzara/V_PROTEINS/pdb/')
    download_fasta(i_results, '/home/elzara/V_PROTEINS/fasta/')

def only_fasta(i_results):
  if download_fasta(i_results, '/home/elzara/V_PROTEINS/fasta/') == 'HTTP Error 404: Not Found':
    print(f'Нет fasta файла для белка {i_results}')
  else:
    download_fasta(i_results, '/home/elzara/V_PROTEINS/fasta/')

def only_pdb(i_results):
  if download_pdb(i_results, '/home/elzara/V_PROTEINS/pdb/') == 'HTTP Error 404: Not Found':
    print(f'Нет fasta файла для белка {i_results}')
  else:
    download_pdb(i_results, '/home/elzara/V_PROTEINS/pdb/')


Parallel(n_jobs=-1, backend='threading')(delayed(pdb_and_fasta)(i_results) 
                                          for i_results in tqdm(results, total=len(results)))


